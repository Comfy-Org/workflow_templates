name: Validate Templates

on:
  push:
    branches: [ main, spec ]
  pull_request:
    branches: [ main ]
    paths:
      - 'templates/**'
      - 'scripts/validate_templates.py'
      - 'scripts/check_third_party_nodes.py'
      - 'scripts/validate_thumbnails.py'
      - 'scripts/validate_multilang_index.py'
      - '.github/workflows/validate-templates.yml'

permissions:
  contents: write
  pull-requests: write

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }}
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jsonschema
    
    - name: Run validation script
      run: python scripts/validate_templates.py
    
    - name: Check JSON syntax
      run: |
        echo "Checking JSON syntax..."
        for file in templates/*.json; do
          if ! python -m json.tool "$file" > /dev/null 2>&1; then
            echo "❌ Invalid JSON syntax in $file"
            exit 1
          fi
        done
        echo "✅ All JSON files have valid syntax"
    
    - name: Check file sizes
      run: |
        echo "Checking file sizes..."
        LARGE_FILES=0
        for file in templates/*; do
          if [ -f "$file" ]; then
            SIZE=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null)
            SIZE_MB=$((SIZE / 1048576))
            if [ "$SIZE_MB" -gt 5 ]; then
              echo "⚠️  Warning: $file is larger than 5MB (${SIZE_MB}MB)"
              LARGE_FILES=$((LARGE_FILES + 1))
            fi
          fi
        done
        if [ "$LARGE_FILES" -gt 0 ]; then
          echo "Found $LARGE_FILES large files. Consider compressing thumbnails."
        fi
    
    - name: Check for third-party nodes
      id: third_party_check
      run: |
        echo "Checking for third-party nodes..."
        python3 scripts/check_third_party_nodes.py > third_party_report.txt 2>&1 || echo "third_party_found=true" >> $GITHUB_OUTPUT
        cat third_party_report.txt
        
        # Check if third-party nodes are found
        if grep -q "Third-party nodes found" third_party_report.txt; then
          echo "third_party_found=true" >> $GITHUB_OUTPUT
          echo "::error::Third-party nodes found. Please only use official nodes with cnr_id: 'comfy-core'"
        else
          echo "third_party_found=false" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true
    
    - name: Comment on PR about third-party nodes
      if: steps.third_party_check.outputs.third_party_found == 'true' && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          
          // Read report content
          let report = '';
          try {
            report = fs.readFileSync('third_party_report.txt', 'utf8');
          } catch (error) {
            report = 'Unable to read third-party node check report';
          }
          
          const comment = `## ❌ Third-Party Nodes Found
          
          Your template uses third-party nodes, which is not allowed for official templates. 
          
          **Why this matters:** Official templates should work out-of-the-box without requiring users to install additional custom nodes or extensions. We want users to be able to open and use templates directly with a standard ComfyUI installation.
          
          ### Check Report:
          \`\`\`
          ${report}
          \`\`\`
          
          ### How to Fix:
          1. Check the \`properties.cnr_id\` field in all nodes in your template files
          2. Ensure all \`cnr_id\` values are \`"comfy-core"\` (official nodes only)
          3. Remove or replace any nodes using other \`cnr_id\` values with equivalent official nodes
          
          **Note**: Only templates using official ComfyUI nodes (\`cnr_id: "comfy-core"\`) can be merged to ensure plug-and-play functionality.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Validate thumbnails
      id: thumbnail_check
      run: |
        echo "Validating template thumbnails..."
        python3 scripts/validate_thumbnails.py > thumbnail_report.txt 2>&1 || echo "thumbnail_issues=true" >> $GITHUB_OUTPUT
        cat thumbnail_report.txt
        
        # Check if thumbnail validation failed
        if grep -q "Thumbnail validation failed" thumbnail_report.txt; then
          echo "thumbnail_issues=true" >> $GITHUB_OUTPUT
          echo "::error::Thumbnail validation failed. Please check thumbnail files and configurations."
        else
          echo "thumbnail_issues=false" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true
    
    - name: Comment on PR about thumbnail issues
      if: steps.thumbnail_check.outputs.thumbnail_issues == 'true' && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          
          // Read thumbnail validation report
          let report = '';
          try {
            report = fs.readFileSync('thumbnail_report.txt', 'utf8');
          } catch (error) {
            report = 'Unable to read thumbnail validation report';
          }
          
          const comment = `## ❌ Thumbnail Validation Issues Found
          
          Your template has thumbnail configuration issues that need to be resolved.
          
          **Why this matters:** Templates need proper thumbnails to provide users with visual previews. Templates with special thumbnail variants like "compareSlider" or "hoverDissolve" require specific thumbnail files to work correctly.
          
          ### Validation Report:
          \`\`\`
          ${report}
          \`\`\`
          
          ### How to Fix:
          1. **Missing thumbnails**: Ensure each template has at least one thumbnail file (e.g., \`template-1.webp\`)
          2. **Incomplete dual thumbnails**: Templates with \`thumbnailVariant: "compareSlider"\` or \`"hoverDissolve"\` need both \`-1\` and \`-2\` thumbnail files
          3. **Check file naming**: Thumbnail files should be named \`{template_name}-{number}.{extension}\`
          4. **Verify file format**: Use the correct file extension (\`.webp\`, \`.mp3\`, etc.) as specified in the template's \`mediaSubtype\`
          
          **Note**: All templates must have proper thumbnails configured to ensure the best user experience when browsing templates.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Configure Git for auto-commit
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
    - name: Validate and auto-fix multi-language index files
      id: multilang_check
      run: |
        echo "Validating multi-language index consistency with auto-fix..."
        python3 scripts/validate_multilang_index.py --auto-fix > multilang_report.txt 2>&1 || echo "multilang_issues=true" >> $GITHUB_OUTPUT
        cat multilang_report.txt
        
        # Check if multi-language validation failed
        if grep -q "Multi-language validation failed" multilang_report.txt; then
          echo "multilang_issues=true" >> $GITHUB_OUTPUT
          echo "::error::Multi-language index validation failed. Some issues remain after auto-fix."
        else
          echo "multilang_issues=false" >> $GITHUB_OUTPUT
        fi
        
        # Check if auto-fixes were applied
        if grep -q "Auto-Fixed Missing Templates" multilang_report.txt; then
          echo "auto_fixes_applied=true" >> $GITHUB_OUTPUT
        else
          echo "auto_fixes_applied=false" >> $GITHUB_OUTPUT
        fi
      continue-on-error: true
    
    - name: Comment on PR about multi-language issues
      if: steps.multilang_check.outputs.multilang_issues == 'true' && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          
          // Read multi-language validation report
          let report = '';
          try {
            report = fs.readFileSync('multilang_report.txt', 'utf8');
          } catch (error) {
            report = 'Unable to read multi-language validation report';
          }
          
          // Check if auto-fixes were applied
          const autoFixesApplied = context.payload.pull_request && 
                                 context.payload.check_suite && 
                                 context.payload.check_suite.conclusion !== 'failure';
          
          let comment = `## Multi-Language Index Validation Results
          
          **Why this matters:** All language versions must have the same templates with identical structural properties to ensure users get the same functionality regardless of their language preference. Only titles, descriptions, and other display text should differ between languages.
          
          ### Validation Report:
          \`\`\`
          ${report}
          \`\`\``;
          
          // Add different sections based on whether issues remain
          if (report.includes('Auto-Fixed Missing Templates')) {
            comment += `
          
          ## ✅ Automatic Fixes Applied
          
          Missing templates have been automatically copied from \`index.json\` to the affected language files and committed to this PR. These templates contain English content that **needs manual translation**.
          
          ### Next Steps:
          1. **Review the auto-generated commit** in this PR
          2. **Translate the English content** in the affected language files:
             - Update \`title\` and \`description\` fields to the target language
             - Keep all other properties (\`mediaType\`, \`thumbnailVariant\`, \`tags\`, etc.) identical
          3. **Do not modify** structural properties - only translate display text`;
          
            if (report.includes('Multi-language validation failed')) {
              comment += `
          
          ## ❌ Additional Issues Found
          
          Some issues could not be auto-fixed and require manual attention:`;
            }
          } else {
            comment += `
          
          ## ❌ Multi-Language Index Inconsistencies Found
          
          Your changes have caused inconsistencies that require manual fixes:`;
          }
          
          if (report.includes('Multi-language validation failed')) {
            comment += `
          
          ### Manual Fixes Required:
          1. **Extra templates**: Remove extra templates or add them to the English reference file if they should exist
          2. **Structure mismatches**: Ensure properties like \`mediaType\`, \`thumbnailVariant\`, \`tags\`, \`models\`, etc. match exactly across all languages
          3. **Category mismatches**: Ensure all language files have the same number and structure of categories
          
          ### Files to Update:
          - Check all \`index.*.json\` files in the \`templates/\` directory
          - Use \`index.json\` (English) as the reference for structure and template list
          - Only translate \`title\` and \`description\` fields - keep all other properties identical
          
          **Note**: All language versions must be perfectly synchronized to ensure consistent user experience across different languages.`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });